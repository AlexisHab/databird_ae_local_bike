version: 2

models:
  - name: int_sales__orders_detailed
    description: '{{ doc("int_sales__orders_detailed") }}'
    tests:
      - dbt_utils.equal_rowcount:
          compare_model: {{ ref('stg_sales__order_items') }}

   
    columns:
      - name: order_item_id
        description: "Primary key - Unique identifier for each order item"
        tests:
          - not_null
          - unique
      
      - name: order_id
        description: "Foreign key to orders table - Links order item to its parent order"
        tests:
          - not_null
      
      - name: product_id
        description: "Foreign key to products table - Identifies the product being ordered"
        tests:
          - not_null
      
      - name: store_id
        description: "Foreign key to stores table - Store where the order was placed"
        tests:
          - not_null
      
      - name: customer_id
        description: "Foreign key to customers table - Customer who placed the order"
        tests:
          - not_null
      
      - name: staff_id
        description: "Foreign key to staff table - Staff member who processed the order"
        tests:
          - not_null
      
      - name: category_id
        description: "Foreign key to categories table - Product category classification"
        tests:
          - not_null
      
      - name: order_status_label
        description: "Current status of the order (e.g., pending, completed, delivered, cancelled)"
        tests:
          - not_null
      
      - name: order_date
        description: "Date when the order was placed"
        tests:
          - not_null
      
      - name: shipped_date
        description: "Date when the order was shipped (null if not yet shipped)"
        tests:
          - dbt_utils.expression_is_true:
              expression: "shipped_date >= order_date"
              config:
                where: "shipped_date is not null"
      
      - name: quantity
        description: "Number of units ordered for this item"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "quantity > 0"
      
      - name: order_item_price
        description: "List price per unit for this order item"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "order_item_price >= 0"
      
      - name: order_item_discount
        description: "Discount amount applied to this order item"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "order_item_discount >= 0"
      
      - name: total_order_item_amount_before_discount
        description: "Calculated gross amount (quantity Ã— list price) before any discounts"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "total_order_item_amount_before_discount >= 0"
      
      - name: total_order_item_amount
        description: "Final net amount for this order item after discounts"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "total_order_item_amount >= 0"
          - dbt_utils.expression_is_true:
              expression: "total_order_item_amount <= total_order_item_amount_before_discount"
      
      - name: order_item_reduction
        description: "Calculated discount amount (gross amount - net amount)"
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "order_item_reduction >= 0"
          - dbt_utils.expression_is_true:
              expression: "abs(order_item_reduction - (total_order_item_amount_before_discount - total_order_item_amount)) < 0.01"
